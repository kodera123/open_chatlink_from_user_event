var cookiesArray = document.cookie.split('; ');
console.log(cookiesArray);


const jsonParseCookieVal = cookie_key => {
  var cookie_val = decodeURIComponent(((document.cookie + ';').match(cookie_key + '=([^¥S;]*)') || [])[1])
  if (cookie_val == 'undefined') {
    return undefined;
  } else {
    return JSON.parse(cookie_val);
  }
}


//get condition for current page *************

// 特定のcookieのkeyからJSONをparseする
let jsonVal = jsonParseCookieVal('fanp_chatlink_conditions')
console.log(jsonVal);

var current_url = location.href;
var current_path = location.pathname;

// forEeach がBreakできないそうなので someを使用
jsonVal.paterns.some(function(element){
  var regex = new RegExp(element.path_regexp);
  var isCurrent = regex.test(current_path);
  if (isCurrent) {
    currentChatlinks = element.page_chatlinks
    // パターンにマッチした瞬間にループ抜ける（本来の使い方とは若干ずれるらしい）
    // 他にも書き方あるので要検討
    return true;
  }
})

console.log(currentChatlinks);


//transition count func *************

transition_val = jsonParseCookieVal('transition_count');
transition_count = !transition_val ? 0 : Number(transition_val);

var current_host = location.protocol + '//' + location.host;
var referrer_url = document.referrer;
var hostRegex = new RegExp('^' + current_host);
isSameHost = hostRegex.test(referrer_url);
if (isSameHost) {
  transition_count += 1;
  document.cookie = `transition_count=${transition_count}`;
  console.log('同じところで遷移したよ');
} else {
  console.log('違うところから来たよ');
}

console.log(transition_count)


// modal dom *************

var closeContentArr = [
      "<div class='fanp-modal-overLay fanp-modal-close'>",
      "モーダル",
      "</div>"
    ];
var modalTag = document.createElement('div');
modalTag.innerHTML = closeContentArr.join('');
modalTag.id = 'fanp-modal';


// open modal func *************

const statusCondProcessExec = isCondProcessExec => {
  if (isCondProcessExec) {
    console.log('もう実行できない');
  } else {
    console.log('まだ実行できる')
  }
}

function openModal() {
  if (isCondProcessExec == true) {
    console.log('1度しか実行できません')
    return;
  }
  document.body.appendChild(modalTag);
  isCondProcessExec = true;
}

var refConditionFunc = function(conditionVal) {
  console.log('refです');
  openModal();
}
var waitForConditionFunc = function(conditionVal) {
  console.log('wait_for です');
  setTimeout(() => {
    openModal();
    statusCondProcessExec(isCondProcessExec);
  }, conditionVal * 1000);
}
var transitionCountConditionFunc = function(conditionVal) {
  console.log('transition_countです');
  openModal();
}

var isCondProcessExec = false

var conditionProcess = function(condition) {
  switch(condition[0]) {
    case 'ref':
      refConditionFunc(condition[1]);
      break;
    case 'wait_for':
      waitForConditionFunc(condition[1]);
      break;
    case 'transition_count':
      transitionCountConditionFunc(condition[1]);
  }
}

if (!currentChatlinks.modal) {
  console.log('ないで！！！');
} else {
  conditionProcess(Object.entries(currentChatlinks.modal.conditions)[0])
}

statusCondProcessExec(isCondProcessExec)


// banner open func

